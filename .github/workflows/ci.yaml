name: Rust CI/CD with Docker and GKE

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - 'service1/**'
      - 'service2/**'
    tags:
      - 'v*'  # Match tags starting with 'v' (e.g., v1.0.0)

jobs:
  test-service1:
    name: Test Service 1
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Run Tests for Service 1
        working-directory: ./service1
        run: cargo test

  test-service2:
    name: Test Service 2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Run Tests for Service 2
        working-directory: ./service2
        run: cargo test

  lint-service1:
    name: Lint Service 1
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Run Linting for Service 1
        working-directory: ./service1
        run: cargo clippy -- -D warnings

  lint-service2:
    name: Lint Service 2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Run Linting for Service 2
        working-directory: ./service2
        run: cargo clippy -- -D warnings

  build-service1:
    name: Build Docker Image for Service 1
    runs-on: ubuntu-latest
    needs: [test-service1, lint-service1]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image for Service 1
        working-directory: ./service1
        run: docker build -t docker.pkg.github.com/${{ github.repository }}/service1:latest -t docker.pkg.github.com/${{ github.repository }}/service1:${{ github.ref }} -f ../dockerfile.d/rust.dockerfile --build-arg="APP_NAME=service1" .
        env:
          DOCKER_BUILDKIT: 1

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login docker.pkg.github.com -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker Image
        run: |
          docker push docker.pkg.github.com/${{ github.repository }}/service1:latest
          docker push docker.pkg.github.com/${{ github.repository }}/service1:${{ github.ref}}

  build-service2:
    name: Build Docker Image for Service 2
    runs-on: ubuntu-latest
    needs: [test-service2, lint-service2]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image for Service 2
        working-directory: ./service2
        run: docker build -t docker.pkg.github.com/${{ github.repository }}/service2:latest -t docker.pkg.github.com/${{ github.repository }}/service2:${{ github.ref }} -f ../dockerfile.d/rust.dockerfile --build-arg="APP_NAME=service2" .
        env:
          DOCKER_BUILDKIT: 1

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login docker.pkg.github.com -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker Image
        run: |
          docker push docker.pkg.github.com/${{ github.repository }}/service2:latest
          docker push docker.pkg.github.com/${{ github.repository }}/service2:${{ github.ref}}

  deploy-to-gke:
      name: Deploy to GKE
      runs-on: ubuntu-latest
      needs: [build-service1, build-service2]
      if: startsWith(github.ref, 'refs/tags/v')  # Only run on tagged commits

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Set Up Google Cloud SDK
          uses: google-github-actions/setup-gcloud@v0.2.0
          with:
            service_account_key: ${{ secrets.GKE_SERVICE_ACCOUNT_KEY }}
            project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
            export_default_credentials: true

        - name: Deploy to GKE
          run: |
            kubectl apply -f ./service1/k8s.yaml -f ./service2/k8s.yaml
